install.packages("swirl")
q()
x <- c(.5,.6)
x<-c(T,F)
x<- 9:29
x<-vector("numeric",length=10)
x<-vector(1.7,length=10)
x<-c(1.7,"at")
as.logical(x)
as.character(x)
install.packages("swirl")
x<-list(1,"a",TRUE,1+4i)
x
m<-matrix(nrow=2,ncol = 3)
m
dim(m)
attributes(m)
m[1][1] = 1
m
m<-matrix(1:6 ,nrow=2,ncol = 3)
m<-matrix(1:2 ,nrow=2,ncol = 3)
m
m<-matrix(1:3 ,nrow=2,ncol = 3)
m
x<-c(1,2,3)
x
y<-(5,6)
y<-c(5,6)
cbind(x,y)
y<-(5,6,7)
y<-c(5,6,7)
cbind(x,y)
z = c(9,10,11)
cbind(x,y,z)
x<-factor(c("yes","yes",no,no))
x<-factor(c("yes","yes","no","no"))
table(x)
attr(x)
attr(,"levels")
m<-matrix(2,3)
m
x<- data.frame(foo=1:4,bar=c(T,T,T))
x<- data.frame(foo=1:4,bar=c(T,T,T,F))
row.names(x)
library(swirl)
swirl()
warnings()
library(swirl)
swirl()
?<<-
source('~/datasciencecoursera/R_intro/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/R_intro/ProgrammingAssignment2/cachematrix.R')
mat <- matrix(1:6,2,3)
mat
mat <- matrix(1:4,2,2)
mat
special_mat <- makeCacheMatrix(mat)
inv <- cacheSolve(special_mat)
inv
inv <-cacheSolve(special_mat)
inv
swirl()
head(flags)
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags,class)
cls_list <- sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
head(unique_vals)
unique_vals
lappy(unique_vals,length)
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) return(elem[2]))
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
ssapply(flags,class)
sapply(flags,class)
sapply(flags,class,character(1))
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
?mapply
?apply
gdpdf <- read.csv('gdp.csv',skip = 4,nrows = 200)
setwd("~/datasciencecoursera/cleaning_data/week3")
setwd("~/datasciencecoursera/cleaning_data/week3")
gdpdf <- read.csv('gdp.csv',skip = 4,nrows = 200)
gdpdf <- gdpdf(which(gdpdf))
gdpdf <- gdpdf(which(gdpdf$X.1 <191))
gdpdf <- gdpdf(which(gdpdf$X.1 <191))
gdpdf <- gdpdf[which(gdpdf$X.1<191),]
head(gdpdf)
library(dplyr)
gdpdf <- arrange(gdpdf,desc(X.1))
tail(gdpdf)
?tail
tail(gdpdf,n=15)
source('~/datasciencecoursera/cleaning_data/week3/quiz3.R')
source('~/datasciencecoursera/cleaning_data/week3/quiz3.R')
head(gdpdf)
tail(gdpdf)
gdpdf$X.1 <- as.numeric(as.character(gdpdf$X.1))
gdpdf <- gdpdf[which(!is.na(gdpdf$X.1)),]
gdpdf <- rename(gdpdf,CountryCode = X)
gdpdf <- rename(gdpdf,CountryCode = X.1)
df <- merge(gdpdf)
edudf <- read.csv('edu.csv')
df <- merge(gdpdf,edudf)
head(edudf)
names(edudf)
df <- merge(gdpdf,edudf,by.x = "CountryCode",by.y = "CountryCode")
names(gdpdf)
source('~/datasciencecoursera/cleaning_data/week3/quiz3.R')
names(gdpdf)
df <- merge(gdpdf,edudf,by.x = "CountryCode",by.y = "CountryCode")
head(df)
sum(!is.na(unique(df$X.1)))
source('~/datasciencecoursera/cleaning_data/week3/quiz3.R')
install.packages("data.table")
source('~/datasciencecoursera/cleaning_data/week3/quiz3.R')
library(data.table)
source('~/datasciencecoursera/cleaning_data/week3/quiz3.R')
source('~/datasciencecoursera/cleaning_data/week3/quiz3.R')
nrow(dt)
?merge
gdpdf <- read.csv('gdp.csv',skip = 4, nrows = 215)
gdpdf <- gdpdf[which(X != "")]
gdpdf <- gdpdf[which(gdpdf$X != "")]
names(gdpdf)
gdpdf <- gdpdf[which(gdpdf$X != ""),]
gdpdf <- gdpdf[which(gdpdf$X != ""),c('X',X.1','X.2','X.3','X.4')]
gdpdf <- gdpdf[which(gdpdf$X != ""),c('X','X.1','X.2','X.3','X.4')]
head(gdpdf)
gdpdf <- rename(gdpdf,CountryCode = X)
edudf <- read.csv('edu.csv')
dt <- merge(gdpdf, edudf, all = TRUE, by = c("CountryCode"))
head(dt)
sum(!is.na(unique(dt$X.1)))
dt[, mean(rankingGDP, na.rm = TRUE), by = Income.Group]
dt[, mean(rankingGDP, na.rm = TRUE), by = 'Income.Group']
group_by(dt,Income.Group)
x <- group_by(dt,Income.Group)
summarize(x, res = mean(Income.Group, na.rm = TRUE))
summarize(x, res = mean(X.1, na.rm = TRUE))
?seq
seq(0,1,length.out = 5)
seq(0,1,length.out = 6)
gdpQuantile <- quantile(dt$X.1,seq(0,1,length.out = 6))
gdpQuantile <- quantile(dt$X.1,seq(0,1,length.out = 6),na.rm = TRUE)
str(x)
table(dt$Income.Group,gdpQuantile)
?table
table(gdpQuantile,dt$Income.Group)
gdpQuantile
?cut
dt$gdpBy <- cut(dt$X.1,breaks = gdpQuantile)
?summarize
names(dt$gdpBy)
unique(dt$gdpBy)
dt[Income.Group == "Lower middle income", .N, by = c("Income.Group", "gdpBy)]
[]
wqe
`12
}
}
x<- dt[Income.Group == "Lower middle income", .N, by = c("Income.Group", "gdpBy)]
x<- dt[Income.Group == "Lower middle income", .N, by = c("Income.Group","gdpBy")]
x <- dt[which(dt$Income.Group == "Lower middle income"),]
x
mean(x)
group_by(x,gdpBy)
res <- group_by(x,gdpBy)
names(res)
summarize(res,res=count(gdpBy))
summarize(res,res=count(CountryCode))
x$CountryCode <- as.numeric(x$CountryCode)
summarize(res,res=count(CountryCode))
res$CountryCode <- as.numeric(res$CountryCode)
summarize(res,res=count(CountryCode))
res$CountryCode <- as.character(res$CountryCode)
summarize(res,res=count(CountryCode))
summarize(res,res=count(CountryCode,na.rm=TRUE))
x[,'gdpBy']
?mean
?aggregate
aggregate(x,by=x$gdpBy,FUN=count)
aggregate(x,by=as.list(x$gdpBy),FUN=count)
